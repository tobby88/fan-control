
5V-Luefter-PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000068  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000068  0000020c  2**0
                  ALLOC
  2 .eeprom       00000001  00810000  00810000  00000291  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      0000002f  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000001c  00000000  00000000  000002c1  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ce  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000433  00000000  00000000  00000c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e4  00000000  00000000  00001041  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001428  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000119  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d9  00000000  00000000  00001575  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  0000164e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000002  000001b0  000001b0  00000284  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001660  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .rodata       0000000b  00800060  000001b2  00000286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 16 .text.main    000000d0  00000068  00000068  0000013c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.libgcc.div 00000026  00000160  00000160  00000234  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.libgcc.div 00000028  00000138  00000138  0000020c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.avrlibc 00000010  000001a0  000001a0  00000274  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.avrlibc 0000001a  00000186  00000186  0000025a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0d c0       	rjmp	.+26     	; 0x1c <__ctors_end>
   2:	d6 c0       	rjmp	.+428    	; 0x1b0 <__bad_interrupt>
   4:	d5 c0       	rjmp	.+426    	; 0x1b0 <__bad_interrupt>
   6:	d4 c0       	rjmp	.+424    	; 0x1b0 <__bad_interrupt>
   8:	d3 c0       	rjmp	.+422    	; 0x1b0 <__bad_interrupt>
   a:	d2 c0       	rjmp	.+420    	; 0x1b0 <__bad_interrupt>
   c:	d1 c0       	rjmp	.+418    	; 0x1b0 <__bad_interrupt>
   e:	d0 c0       	rjmp	.+416    	; 0x1b0 <__bad_interrupt>
  10:	cf c0       	rjmp	.+414    	; 0x1b0 <__bad_interrupt>
  12:	ce c0       	rjmp	.+412    	; 0x1b0 <__bad_interrupt>

00000014 <.dinit>:
  14:	00 60       	ori	r16, 0x00	; 0
  16:	00 6b       	ori	r16, 0xB0	; 176
  18:	00 01       	movw	r0, r0
  1a:	b2 00       	.word	0x00b2	; ????

0000001c <__ctors_end>:
  1c:	11 24       	eor	r1, r1
  1e:	1f be       	out	0x3f, r1	; 63
  20:	cf e9       	ldi	r28, 0x9F	; 159
  22:	cd bf       	out	0x3d, r28	; 61

00000024 <__do_copy_data>:
  24:	e4 e1       	ldi	r30, 0x14	; 20
  26:	f0 e0       	ldi	r31, 0x00	; 0
  28:	40 e0       	ldi	r20, 0x00	; 0
  2a:	17 c0       	rjmp	.+46     	; 0x5a <__do_clear_bss+0x8>
  2c:	b5 91       	lpm	r27, Z+
  2e:	a5 91       	lpm	r26, Z+
  30:	35 91       	lpm	r19, Z+
  32:	25 91       	lpm	r18, Z+
  34:	05 91       	lpm	r16, Z+
  36:	07 fd       	sbrc	r16, 7
  38:	0c c0       	rjmp	.+24     	; 0x52 <__do_clear_bss>
  3a:	95 91       	lpm	r25, Z+
  3c:	85 91       	lpm	r24, Z+
  3e:	ef 01       	movw	r28, r30
  40:	f9 2f       	mov	r31, r25
  42:	e8 2f       	mov	r30, r24
  44:	05 90       	lpm	r0, Z+
  46:	0d 92       	st	X+, r0
  48:	a2 17       	cp	r26, r18
  4a:	b3 07       	cpc	r27, r19
  4c:	d9 f7       	brne	.-10     	; 0x44 <__DATA_REGION_LENGTH__+0x4>
  4e:	fe 01       	movw	r30, r28
  50:	04 c0       	rjmp	.+8      	; 0x5a <__do_clear_bss+0x8>

00000052 <__do_clear_bss>:
  52:	1d 92       	st	X+, r1
  54:	a2 17       	cp	r26, r18
  56:	b3 07       	cpc	r27, r19
  58:	e1 f7       	brne	.-8      	; 0x52 <__do_clear_bss>
  5a:	eb 31       	cpi	r30, 0x1B	; 27
  5c:	f4 07       	cpc	r31, r20
  5e:	31 f7       	brne	.-52     	; 0x2c <__do_copy_data+0x8>
  60:	03 d0       	rcall	.+6      	; 0x68 <_etext>
  62:	00 c0       	rjmp	.+0      	; 0x64 <_exit>

00000064 <_exit>:
  64:	f8 94       	cli

00000066 <__stop_program>:
  66:	ff cf       	rjmp	.-2      	; 0x66 <__stop_program>

Disassembly of section .text:

000001b0 <__bad_interrupt>:
 1b0:	27 cf       	rjmp	.-434    	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000068 <main>:

// definition for space in EEPROM to save the last step, chosen before reboot
uint8_t ee_pwm_step EEMEM = 0;

int main(void)
{
  68:	cf 93       	push	r28
  6a:	df 93       	push	r29
  6c:	cd b7       	in	r28, 0x3d	; 61
  6e:	dd 27       	eor	r29, r29
  70:	c6 51       	subi	r28, 0x16	; 22
  72:	cd bf       	out	0x3d, r28	; 61
	DDRB = (1<<PB1); // set all pins as input besides pwm pin
  74:	82 e0       	ldi	r24, 0x02	; 2
  76:	87 bb       	out	0x17, r24	; 23
	PORTB = ~(1<<PB1); // set all pins to high (pull up) besides pwm pin
  78:	8d ef       	ldi	r24, 0xFD	; 253
  7a:	88 bb       	out	0x18, r24	; 24

	// calculate timer (hardware pwm) values
	uint8_t upper_limit = F_CPU/F_PWM-1;
	uint8_t pwm_steps_percent[] = PWM_STEPS_PERCENT;
  7c:	8b e0       	ldi	r24, 0x0B	; 11
  7e:	e0 e6       	ldi	r30, 0x60	; 96
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	de 01       	movw	r26, r28
  84:	1c 96       	adiw	r26, 0x0c	; 12
  86:	01 90       	ld	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	8a 95       	dec	r24
  8c:	e1 f7       	brne	.-8      	; 0x86 <main+0x1e>
	size_t pwm_steps_count = sizeof(pwm_steps_percent)/sizeof(pwm_steps_percent[0]);
	uint8_t pwm_steps[pwm_steps_count];
	for(uint8_t i=0; i<pwm_steps_count; i++)
  8e:	40 e0       	ldi	r20, 0x00	; 0
  90:	25 c0       	rjmp	.+74     	; 0xdc <__stack+0x3d>
		pwm_steps[i] = pwm_steps_percent[i]*upper_limit/100;
  92:	e4 2f       	mov	r30, r20
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	ac e0       	ldi	r26, 0x0C	; 12
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	ac 0f       	add	r26, r28
  9c:	bd 1f       	adc	r27, r29
  9e:	ae 0f       	add	r26, r30
  a0:	bf 1f       	adc	r27, r31
  a2:	2c 91       	ld	r18, X
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	c9 01       	movw	r24, r18
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	82 0f       	add	r24, r18
  ae:	93 1f       	adc	r25, r19
  b0:	00 24       	eor	r0, r0
  b2:	96 95       	lsr	r25
  b4:	87 95       	ror	r24
  b6:	07 94       	ror	r0
  b8:	96 95       	lsr	r25
  ba:	87 95       	ror	r24
  bc:	07 94       	ror	r0
  be:	98 2f       	mov	r25, r24
  c0:	80 2d       	mov	r24, r0
  c2:	82 1b       	sub	r24, r18
  c4:	93 0b       	sbc	r25, r19
  c6:	64 e6       	ldi	r22, 0x64	; 100
  c8:	70 e0       	ldi	r23, 0x00	; 0
  ca:	4a d0       	rcall	.+148    	; 0x160 <__divmodhi4>
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	8c 0f       	add	r24, r28
  d2:	9d 1f       	adc	r25, r29
  d4:	e8 0f       	add	r30, r24
  d6:	f9 1f       	adc	r31, r25
  d8:	60 83       	st	Z, r22
	// calculate timer (hardware pwm) values
	uint8_t upper_limit = F_CPU/F_PWM-1;
	uint8_t pwm_steps_percent[] = PWM_STEPS_PERCENT;
	size_t pwm_steps_count = sizeof(pwm_steps_percent)/sizeof(pwm_steps_percent[0]);
	uint8_t pwm_steps[pwm_steps_count];
	for(uint8_t i=0; i<pwm_steps_count; i++)
  da:	4f 5f       	subi	r20, 0xFF	; 255
  dc:	4b 30       	cpi	r20, 0x0B	; 11
  de:	c8 f2       	brcs	.-78     	; 0x92 <main+0x2a>
		pwm_steps[i] = pwm_steps_percent[i]*upper_limit/100;
	uint8_t pwm = 0;
	
	TCCR0A = (1<<WGM01) | (1<<WGM00) | (1<<COM0B1); // hardware pwm on hardware-pwm-pin-b (PB1), timer in fast pwm mode (7), clear on compare match, set on top
  e0:	83 e2       	ldi	r24, 0x23	; 35
  e2:	8f bd       	out	0x2f, r24	; 47
	TCCR0B = (1<<WGM02) | (1<<CS00); // timer in fast pwm mode (7), no divider, run timer with system clock
  e4:	89 e0       	ldi	r24, 0x09	; 9
  e6:	83 bf       	out	0x33, r24	; 51
	OCR0A = upper_limit; // set compare register A, so the timer will run at the frequency defined in F_PWM
  e8:	8f eb       	ldi	r24, 0xBF	; 191
  ea:	86 bf       	out	0x36, r24	; 54
	
	// read last chosen step from EEPROM
	uint8_t current_pwm_step=eeprom_read_byte(&ee_pwm_step);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	80 e8       	ldi	r24, 0x80	; 128
  f2:	56 d0       	rcall	.+172    	; 0x1a0 <eeprom_read_byte>
  f4:	18 2f       	mov	r17, r24
    while(1)
    {
		// set pwm to the desired pulse width
		pwm=pwm_steps[current_pwm_step];
  f6:	e1 e0       	ldi	r30, 0x01	; 1
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	ec 0f       	add	r30, r28
  fc:	fd 1f       	adc	r31, r29
  fe:	e1 0f       	add	r30, r17
 100:	f1 1d       	adc	r31, r1
 102:	80 81       	ld	r24, Z
		OCR0B = pwm;
 104:	89 bd       	out	0x29, r24	; 41
		
		// wait for PB3 going down (button pressed)
		while((PINB & (1<<PB3))) {}
 106:	b3 99       	sbic	0x16, 3	; 22
 108:	fe cf       	rjmp	.-4      	; 0x106 <__stack+0x67>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	8f e5       	ldi	r24, 0x5F	; 95
 10c:	9a ee       	ldi	r25, 0xEA	; 234
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <__stack+0x6f>
 112:	00 c0       	rjmp	.+0      	; 0x114 <__stack+0x75>
 114:	00 00       	nop
		_delay_ms(50);
		// wait for PB3 going up again (button released)
		while(!(PINB & (1<<PB3))) {}
 116:	b3 9b       	sbis	0x16, 3	; 22
 118:	fe cf       	rjmp	.-4      	; 0x116 <__stack+0x77>
 11a:	8f e5       	ldi	r24, 0x5F	; 95
 11c:	9a ee       	ldi	r25, 0xEA	; 234
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <__stack+0x7f>
 122:	00 c0       	rjmp	.+0      	; 0x124 <__stack+0x85>
 124:	00 00       	nop
		_delay_ms(50);
		// button has been pressed => loops above end, so increment the step to choose the next pwm step from the list now:
		current_pwm_step++;
 126:	1f 5f       	subi	r17, 0xFF	; 255
		
		// if at the end of the list: start over at the beginning
		if(current_pwm_step>=pwm_steps_count)
 128:	1b 30       	cpi	r17, 0x0B	; 11
 12a:	08 f0       	brcs	.+2      	; 0x12e <__stack+0x8f>
			current_pwm_step=0;
 12c:	10 e0       	ldi	r17, 0x00	; 0
		
		// save value of the chosen step to EEPROM
		eeprom_write_byte(&ee_pwm_step, current_pwm_step);
 12e:	61 2f       	mov	r22, r17
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	28 d0       	rcall	.+80     	; 0x186 <eeprom_write_byte>
    }
 136:	df cf       	rjmp	.-66     	; 0xf6 <__stack+0x57>

Disassembly of section .text.libgcc.div:

00000160 <__divmodhi4>:
 160:	97 fb       	bst	r25, 7
 162:	07 2e       	mov	r0, r23
 164:	16 f4       	brtc	.+4      	; 0x16a <__divmodhi4+0xa>
 166:	00 94       	com	r0
 168:	06 d0       	rcall	.+12     	; 0x176 <__divmodhi4_neg1>
 16a:	77 fd       	sbrc	r23, 7
 16c:	08 d0       	rcall	.+16     	; 0x17e <__divmodhi4_neg2>
 16e:	e4 df       	rcall	.-56     	; 0x138 <__udivmodhi4>
 170:	07 fc       	sbrc	r0, 7
 172:	05 d0       	rcall	.+10     	; 0x17e <__divmodhi4_neg2>
 174:	3e f4       	brtc	.+14     	; 0x184 <__divmodhi4_exit>

00000176 <__divmodhi4_neg1>:
 176:	90 95       	com	r25
 178:	81 95       	neg	r24
 17a:	9f 4f       	sbci	r25, 0xFF	; 255
 17c:	08 95       	ret

0000017e <__divmodhi4_neg2>:
 17e:	70 95       	com	r23
 180:	61 95       	neg	r22
 182:	7f 4f       	sbci	r23, 0xFF	; 255

00000184 <__divmodhi4_exit>:
 184:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000138 <__udivmodhi4>:
 138:	aa 1b       	sub	r26, r26
 13a:	bb 1b       	sub	r27, r27
 13c:	51 e1       	ldi	r21, 0x11	; 17
 13e:	07 c0       	rjmp	.+14     	; 0x14e <__udivmodhi4_ep>

00000140 <__udivmodhi4_loop>:
 140:	aa 1f       	adc	r26, r26
 142:	bb 1f       	adc	r27, r27
 144:	a6 17       	cp	r26, r22
 146:	b7 07       	cpc	r27, r23
 148:	10 f0       	brcs	.+4      	; 0x14e <__udivmodhi4_ep>
 14a:	a6 1b       	sub	r26, r22
 14c:	b7 0b       	sbc	r27, r23

0000014e <__udivmodhi4_ep>:
 14e:	88 1f       	adc	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	5a 95       	dec	r21
 154:	a9 f7       	brne	.-22     	; 0x140 <__udivmodhi4_loop>
 156:	80 95       	com	r24
 158:	90 95       	com	r25
 15a:	bc 01       	movw	r22, r24
 15c:	cd 01       	movw	r24, r26
 15e:	08 95       	ret

Disassembly of section .text.avrlibc:

000001a0 <eeprom_read_byte>:
 1a0:	cb 01       	movw	r24, r22
 1a2:	e1 99       	sbic	0x1c, 1	; 28
 1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <eeprom_read_byte+0x2>
 1a6:	8e bb       	out	0x1e, r24	; 30
 1a8:	e0 9a       	sbi	0x1c, 0	; 28
 1aa:	99 27       	eor	r25, r25
 1ac:	8d b3       	in	r24, 0x1d	; 29
 1ae:	08 95       	ret

Disassembly of section .text.avrlibc:

00000186 <eeprom_write_byte>:
 186:	26 2f       	mov	r18, r22

00000188 <eeprom_write_r18>:
 188:	e1 99       	sbic	0x1c, 1	; 28
 18a:	fe cf       	rjmp	.-4      	; 0x188 <eeprom_write_r18>
 18c:	1c ba       	out	0x1c, r1	; 28
 18e:	8e bb       	out	0x1e, r24	; 30
 190:	2d bb       	out	0x1d, r18	; 29
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	e2 9a       	sbi	0x1c, 2	; 28
 198:	e1 9a       	sbi	0x1c, 1	; 28
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	08 95       	ret
